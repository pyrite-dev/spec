<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE Specification SYSTEM "xml2txt.dtd">
<Specification>
	<Author>
		<Name>Nishi</Name>
		<Organization>Pyrite Development Team</Organization>
		<Email>nishi@nishi.boats</Email>
	</Author>
	<Author>
		<Name>penguin2233</Name>
		<Organization>Pyrite Development Team</Organization>
	</Author>
	<Author>
		<Name>Maelstrom</Name>
		<Organization>Pyrite Development Team</Organization>
	</Author>
	<Meta>
		<Date>June 2025</Date>
		<Title>The GoldFish Control Protocol</Title>
		<Short>GFCP</Short>
		<Organization>Pyrite Development Team</Organization>
		<Authors>Nishi, et al</Authors>
	</Meta>
	<Section Name="Abstract">
		<Content>
			The GoldFish Control Protocol (GFCP) is an application-level protoocol to control the behavior of a server-side and client-side engine over TCP/IP.
		</Content>
	</Section>
	<TOC />
	<Numbered>
		<Section Name="Introduction">
			<Section Name="Purpose">
				<Content>
					The GoldFish Control Protocol (GFCP) is an application-level protoocol to control the behavior of a server-side and client-side engine over TCP/IP.
				</Content>
			</Section>
			<Section Name="Protocol Overview">
				<Content>
					The GFCP protocol is based on a request/response paradigm. A client establishes a connection with a server and waits until server sends ready packet, then start sending a request to the server. The server responds with a packet with same structure as client packet.

					The GFCP protocol specifies TCP/IP port 7468 as default port.
					The protocol MUST be handshaked using the GoldFish Secure Layer.
				</Content>
			</Section>
		</Section>
		<Section Name="Conformance Requirements">
			<Content>
				The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.
			</Content>
			<Section Name="Terminology and Other Conventions">
				TBD
			</Section>
		</Section>
		<Section Name="Protocol Structure">
			<Section Name="Frame">
				<Center>
					<RawContent>
<![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------------------------------------------------------+
|                            opcode                             |
+-------------------------------+-------------------------------+
|            length             |             data              |
+-------------------------------+ - - - - - - - - - - - - - - - +
:                        data continued                         :
+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
|                        data continued                         |
+---------------------------------------------------------------+
]]>
					</RawContent>
				</Center>

				<Content>
					Opcode: 32 bits
				</Content>
				<IndentSection>
					<Content>
						Defines the interpretation of the "data". MUST be big endian.
						4 characters opcode which is used in document can be converted to the number using below method (C):
					</Content>
					<IndentSection>
						<Content>
							const char* method = "SRDY";
							uint32_t number = *(uint32_t*)method;
							number = htonl(number);
						</Content>
					</IndentSection>
				</IndentSection>

				<Content>
					Length: 16 bits
				</Content>
				<IndentSection>
					<Content>
						Defines the length of the "data". MUST be big endian.
					</Content>
				</IndentSection>
			</Section>
			<Section Name="Request">
				<Section Name="Request - Not Authenticated State">
					<Content>
					</Content>
				</Section>
				<Section Name="Request - Authenticated State">
					<Content>
					</Content>
				</Section>
			</Section>
			<Section Name="Response">
				<Section Name="SRDY response">
					<Content>
						Indicates the server is ready to accept client requests.
					</Content>
				</Section>
			</Section>
		</Section>
	</Numbered>
</Specification>
